extend_syntax
        DefaultSeparator ::= /((?s:\s|#[^\n|][^\n]*|#\|.*?\|#)*)/ ;
        DefaultAtom ::= common ( ,{DefaultWord}, reserving
            'if'
            'let'
            'letfn'
            'forall'
            'mu_type'
            'Ident'
            'Int'
            'Nat'
            'Float'
            'String'
            'match'
            'enum'
            'struct'
            'fold'
            'unfold'
            'extend_syntax'
            'in'
            'import'
            'capture_language'
        ) ;
in
    # This first part is just adding a lot of basic stuff that's missing in Unseemly.
    # Like comments, added to `DefaultSeparator` above!
    # Skip to the "----- SAND DUNE -----" to get to the definition of Sand Dune itself.
    # (Normally, this standard-library-sort-of-stuff would be in another file, but the Unseemly
    # Web IDE doesn't support `include` yet, so I've embedded it.)
extend_syntax
    ### Introduce `let` expressions.
    Expr ::=also
        forall T S . '{ [
            lit ,{ DefaultToken }, = 'let'
            [
                pat := ( ,{ Pat<S> }, )
                lit ,{ DefaultToken }, = '='
                val := ( ,{ Expr<S> }, )
                lit ,{ DefaultToken }, = ';'
            ] *
            lit ,{ DefaultToken }, = 'in'
            body := ( ,{ Expr<T> }, <-- ...[pat = val]... )
        ] }' let_macro -> .{
            '[Expr |
                match **[...[,val, >> ,[val], ]... ]**
                    { **[...[,pat, >> ,[pat],]... ]** => ,[body], } ]'
        }. ;
in
extend_syntax
    ### Introduce `for` loops
    Expr ::=also forall T . '{ [
        lit ,{ DefaultToken }, = 'for'
        pat := ( ,{ Pat<T> }, )
        lit ,{ DefaultToken }, = 'in'
        seq := ( ,{ Expr<Sequence<T>> }, )
        # This uses `:` instead of `=`, because `T` is a type.
        # `body` returns `Unit`; it's just being invoked for side-effects.
        body := ( ,{ Expr<Unit> }, <-- pat : T )
    ] }' for_loop -> .{
        '[Expr |
            (foldl ,[seq],
                **[]**
                # Interpolation into atom positions doesn't work yet,
                #  so we use `let` to interpolate a pattern.
                .[unit : Unit  arg : ,[prefab_type T], .
                    let ,[pat], = arg ; in ,[body],
                ]. )
        ]'
    }. ;
in
extend_syntax
    ### Add numeric literals.
    Expr ::=also
        common (forall . '{
            # Awkward `pick` stuff just to have and then throw away `DefaultSeparator`:
            digit_string := (pick tok in [,{DefaultSeparator}, tok := (/([0-9]+)/) ])
        }' base_ten_literal -> .{
            let number = (new_cell zero) ; in
            -{
                for digit in (string_to_sequence (ident_to_string digit_string))
                    (assign number (plus (times (value number) ten)
                                         # The character for digit 0 is codepoint 48:
                                         (minus digit (plus (times ten four) eight)))) ;
                (prefab (value number))
            }-
        }.) ;
in
extend_syntax
  Expr ::=also forall T . '{
      [
          lit ,{ OpenDelim }, = '('
          lit ,{ DefaultToken }, = 'if'
          cond := ( ,{ Expr< Bool > }, )
          then_e := ( ,{ Expr< T > }, )
          else_e := ( ,{ Expr< T > }, )
          lit ,{ CloseDelim }, = ')'
      ]
  }' conditional -> .{
      '[Expr | match ,[cond], {
                +[True]+ => ,[then_e],
                +[False]+ => ,[else_e], } ]' }. ;
in


# ----- SAND DUNE -----
extend_syntax
    # Reserve some words:
    DefaultAtom ::= common ( ,{DefaultWord}, reserving 'Atoms' 'Rules' 'Start' 'No' ) ;

    # Reserve some symbols:
    DefaultToken ::= /\s*(\[|\]|\||->|capture_language|_|\+)/ ;

    Expr ::= alt[
        # `ActuallyBool` is a hack; `*` doesn't work unless there's a type variable in it.
        forall ActuallyBool . '{[
            lit ,{DefaultWord}, = 'Rules'
            [
                ,{DefaultSeparator},
                lit ,{DefaultToken}, = '['
                [
                    lhs := ( ,{Expr< [ActuallyBool -> **[Bool Bool]** ] >}, ) # <-- atom_name : Bool
                    alt[ lit ,{DefaultToken}, = ']'  lit ,{DefaultToken}, = '|' ]alt
                ] *
                lit ,{DefaultToken}, = '->'
                lit ,{DefaultToken}, = '['
                [
                    rhs := ( ,{Expr< [ActuallyBool -> **[Bool Bool]** ] >}, ) # <-- atom_name : Bool
                    alt[ lit ,{DefaultToken}, = ']'  lit ,{DefaultToken}, = '|' ]alt
                ] *
            ] *
            lit ,{DefaultWord}, = 'Start'
            ,{DefaultSeparator},
            start_pattern := ( /\[([^\]]*)\]/ )
        ]}' top_level -> .{
'[Expr|
    let string_pattern = ,[(prefab (string_to_sequence (ident_to_string start_pattern)))], ; in
        # Inconveniently, `cell` is also Unseemly's word for a mutable container.
    let pattern = (map string_pattern .[ char : Int . (new_cell (equal? char 43)) ].) ;
        # Buffer all writes so that subsequent rules don't "see" each other's effects.
        # (This is different than how PuzzleScript does it, but it allows cellular-automaton-like behavior)
        pattern_buffer = (map string_pattern .[ char : Int . (new_cell (equal? char 43)) ].) ;
        output = (new_cell "<pre>
") ; in
    -{
        for step in (range 0 15) -{
            # output:
            for entry in pattern
                (assign output (concat (value output)
                    (if (value entry) "█" "░"))) ;
            # append a newline:
            (assign output (concat (value output) "
")) ;
            -{
                # For each rule:
                ...[ ,lhs, ,rhs, >>
                    for i in (range 0 (len pattern))
                        let j = (new_cell 0) ;
                            all_match = (new_cell true) ; in -{
                        # For each cell in the rule:
                        -{
                            ...[ ,lhs, ,rhs, >> -{
                                let mod_ij = (modulo (plus i (value j)) (len pattern)) ; in
                                let **[matches ignored]** =
                                    (,[lhs], (value (index pattern mod_ij))) ; in
                                    (if matches
                                        **[]**  # do nothing
                                        (assign all_match false)) ;
                                (assign j (plus (value j) 1))
                            }- ]... ;
                            **[]**
                        }- ;
                        (assign j 0) ;
                        (if (value all_match) -{
                            # For each cell in the rule (again, to write results):
                            ...[ ,lhs, ,rhs, >> -{
                                let mod_ij = (modulo (plus i (value j)) (len pattern)) ; in
                                let **[ignored output]**
                                        = (,[rhs], (value (index pattern_buffer mod_ij))) ; in
                                    (assign (index pattern_buffer mod_ij) output) ;
                                (assign j (plus (value j) 1))
                            }- ]... ; **[]** }-
                            **[]**  # else, do nothing
                        )
                }- ]...
                ;
                **[]**
            }- ;

            # Flip the buffer:
            for i in (range 0 (len pattern)) -{
                (assign (index pattern i) (value (index pattern_buffer i)))
            }-


        }- ;
        (assign output (concat (value output) "</pre>")) ;

        (value output)
    }-
]'
        }.

    ### These define the pattern/output forms.
    forall . '{[
        lit ,{DefaultWord}, = 'No'
        body := ( ,{Expr< [Bool -> **[Bool Bool]** ] >}, )
    ]}' negate -> .{
        '[Expr |
            .[ cell : Bool .
                let **[matches output]** = (,[body], cell) ; in
                # pattern: negate / output: negate
                **[ (not matches) (not output) ]**
            ].
        ]'
    }.
    forall . '{[
        lit ,{DefaultWord}, = 'cell'
    ]}' atom_match -> .{
        '[Expr |
            .[ cell : Bool .
                # pattern: match if present / output: set to true
                **[ cell  true ]** ].
        ]'
    }.
    forall . '{[
        lit ,{DefaultToken}, = '_'
    ]}' wildcard -> .{
        '[Expr |
            .[ cell : Bool .
                # pattern: always match / output: no effect
                **[ true  cell ]** ].
        ]'
    }.
    ### Numeric literals in Sand Dune, so that we can have the step counter
    common (forall . '{
        # Awkward `pick` stuff just to have and then throw away `DefaultSeparator`:
        digit_string := (pick tok in [,{DefaultSeparator}, tok := (/([0-9]+)/) ])
    }' base_ten_literal -> .{
        let number = (new_cell zero) ; in
        -{
            for digit in (string_to_sequence (ident_to_string digit_string))
                (assign number (plus (times (value number) ten)
                                        # The character for digit 0 is codepoint 48:
                                        (minus digit (plus (times ten four) eight)))) ;
            (prefab (value number))
        }-
    }.)

    ### Enable `capture_language`.
    capture_language_form
    ]alt ;
in
    capture_language
